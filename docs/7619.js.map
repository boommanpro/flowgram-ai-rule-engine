{"version":3,"file":"7619.js","sources":["webpack://@flowgram.ai/demo-free-layout/./node_modules/.pnpm/monaco-editor@0.52.2/node_modules/monaco-editor/esm/vs/editor/common/services/languagesAssociations.js","webpack://@flowgram.ai/demo-free-layout/./node_modules/.pnpm/monaco-editor@0.52.2/node_modules/monaco-editor/esm/vs/editor/common/services/languagesRegistry.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { parse } from '../../../base/common/glob.js';\nimport { Mimes } from '../../../base/common/mime.js';\nimport { Schemas } from '../../../base/common/network.js';\nimport { basename, posix } from '../../../base/common/path.js';\nimport { DataUri } from '../../../base/common/resources.js';\nimport { startsWithUTF8BOM } from '../../../base/common/strings.js';\nimport { PLAINTEXT_LANGUAGE_ID } from '../languages/modesRegistry.js';\nlet registeredAssociations = [];\nlet nonUserRegisteredAssociations = [];\nlet userRegisteredAssociations = [];\n/**\n * Associate a language to the registry (platform).\n * * **NOTE**: This association will lose over associations registered using `registerConfiguredLanguageAssociation`.\n * * **NOTE**: Use `clearPlatformLanguageAssociations` to remove all associations registered using this function.\n */\nexport function registerPlatformLanguageAssociation(association, warnOnOverwrite = false) {\n    _registerLanguageAssociation(association, false, warnOnOverwrite);\n}\nfunction _registerLanguageAssociation(association, userConfigured, warnOnOverwrite) {\n    // Register\n    const associationItem = toLanguageAssociationItem(association, userConfigured);\n    registeredAssociations.push(associationItem);\n    if (!associationItem.userConfigured) {\n        nonUserRegisteredAssociations.push(associationItem);\n    }\n    else {\n        userRegisteredAssociations.push(associationItem);\n    }\n    // Check for conflicts unless this is a user configured association\n    if (warnOnOverwrite && !associationItem.userConfigured) {\n        registeredAssociations.forEach(a => {\n            if (a.mime === associationItem.mime || a.userConfigured) {\n                return; // same mime or userConfigured is ok\n            }\n            if (associationItem.extension && a.extension === associationItem.extension) {\n                console.warn(`Overwriting extension <<${associationItem.extension}>> to now point to mime <<${associationItem.mime}>>`);\n            }\n            if (associationItem.filename && a.filename === associationItem.filename) {\n                console.warn(`Overwriting filename <<${associationItem.filename}>> to now point to mime <<${associationItem.mime}>>`);\n            }\n            if (associationItem.filepattern && a.filepattern === associationItem.filepattern) {\n                console.warn(`Overwriting filepattern <<${associationItem.filepattern}>> to now point to mime <<${associationItem.mime}>>`);\n            }\n            if (associationItem.firstline && a.firstline === associationItem.firstline) {\n                console.warn(`Overwriting firstline <<${associationItem.firstline}>> to now point to mime <<${associationItem.mime}>>`);\n            }\n        });\n    }\n}\nfunction toLanguageAssociationItem(association, userConfigured) {\n    return {\n        id: association.id,\n        mime: association.mime,\n        filename: association.filename,\n        extension: association.extension,\n        filepattern: association.filepattern,\n        firstline: association.firstline,\n        userConfigured: userConfigured,\n        filenameLowercase: association.filename ? association.filename.toLowerCase() : undefined,\n        extensionLowercase: association.extension ? association.extension.toLowerCase() : undefined,\n        filepatternLowercase: association.filepattern ? parse(association.filepattern.toLowerCase()) : undefined,\n        filepatternOnPath: association.filepattern ? association.filepattern.indexOf(posix.sep) >= 0 : false\n    };\n}\n/**\n * Clear language associations from the registry (platform).\n */\nexport function clearPlatformLanguageAssociations() {\n    registeredAssociations = registeredAssociations.filter(a => a.userConfigured);\n    nonUserRegisteredAssociations = [];\n}\n/**\n * @see `getMimeTypes`\n */\nexport function getLanguageIds(resource, firstLine) {\n    return getAssociations(resource, firstLine).map(item => item.id);\n}\nfunction getAssociations(resource, firstLine) {\n    let path;\n    if (resource) {\n        switch (resource.scheme) {\n            case Schemas.file:\n                path = resource.fsPath;\n                break;\n            case Schemas.data: {\n                const metadata = DataUri.parseMetaData(resource);\n                path = metadata.get(DataUri.META_DATA_LABEL);\n                break;\n            }\n            case Schemas.vscodeNotebookCell:\n                // File path not relevant for language detection of cell\n                path = undefined;\n                break;\n            default:\n                path = resource.path;\n        }\n    }\n    if (!path) {\n        return [{ id: 'unknown', mime: Mimes.unknown }];\n    }\n    path = path.toLowerCase();\n    const filename = basename(path);\n    // 1.) User configured mappings have highest priority\n    const configuredLanguage = getAssociationByPath(path, filename, userRegisteredAssociations);\n    if (configuredLanguage) {\n        return [configuredLanguage, { id: PLAINTEXT_LANGUAGE_ID, mime: Mimes.text }];\n    }\n    // 2.) Registered mappings have middle priority\n    const registeredLanguage = getAssociationByPath(path, filename, nonUserRegisteredAssociations);\n    if (registeredLanguage) {\n        return [registeredLanguage, { id: PLAINTEXT_LANGUAGE_ID, mime: Mimes.text }];\n    }\n    // 3.) Firstline has lowest priority\n    if (firstLine) {\n        const firstlineLanguage = getAssociationByFirstline(firstLine);\n        if (firstlineLanguage) {\n            return [firstlineLanguage, { id: PLAINTEXT_LANGUAGE_ID, mime: Mimes.text }];\n        }\n    }\n    return [{ id: 'unknown', mime: Mimes.unknown }];\n}\nfunction getAssociationByPath(path, filename, associations) {\n    let filenameMatch = undefined;\n    let patternMatch = undefined;\n    let extensionMatch = undefined;\n    // We want to prioritize associations based on the order they are registered so that the last registered\n    // association wins over all other. This is for https://github.com/microsoft/vscode/issues/20074\n    for (let i = associations.length - 1; i >= 0; i--) {\n        const association = associations[i];\n        // First exact name match\n        if (filename === association.filenameLowercase) {\n            filenameMatch = association;\n            break; // take it!\n        }\n        // Longest pattern match\n        if (association.filepattern) {\n            if (!patternMatch || association.filepattern.length > patternMatch.filepattern.length) {\n                const target = association.filepatternOnPath ? path : filename; // match on full path if pattern contains path separator\n                if (association.filepatternLowercase?.(target)) {\n                    patternMatch = association;\n                }\n            }\n        }\n        // Longest extension match\n        if (association.extension) {\n            if (!extensionMatch || association.extension.length > extensionMatch.extension.length) {\n                if (filename.endsWith(association.extensionLowercase)) {\n                    extensionMatch = association;\n                }\n            }\n        }\n    }\n    // 1.) Exact name match has second highest priority\n    if (filenameMatch) {\n        return filenameMatch;\n    }\n    // 2.) Match on pattern\n    if (patternMatch) {\n        return patternMatch;\n    }\n    // 3.) Match on extension comes next\n    if (extensionMatch) {\n        return extensionMatch;\n    }\n    return undefined;\n}\nfunction getAssociationByFirstline(firstLine) {\n    if (startsWithUTF8BOM(firstLine)) {\n        firstLine = firstLine.substr(1);\n    }\n    if (firstLine.length > 0) {\n        // We want to prioritize associations based on the order they are registered so that the last registered\n        // association wins over all other. This is for https://github.com/microsoft/vscode/issues/20074\n        for (let i = registeredAssociations.length - 1; i >= 0; i--) {\n            const association = registeredAssociations[i];\n            if (!association.firstline) {\n                continue;\n            }\n            const matches = firstLine.match(association.firstline);\n            if (matches && matches.length > 0) {\n                return association;\n            }\n        }\n    }\n    return undefined;\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Emitter } from '../../../base/common/event.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport { regExpLeadsToEndlessLoop } from '../../../base/common/strings.js';\nimport { clearPlatformLanguageAssociations, getLanguageIds, registerPlatformLanguageAssociation } from './languagesAssociations.js';\nimport { ModesRegistry, PLAINTEXT_LANGUAGE_ID } from '../languages/modesRegistry.js';\nimport { Extensions } from '../../../platform/configuration/common/configurationRegistry.js';\nimport { Registry } from '../../../platform/registry/common/platform.js';\nconst hasOwnProperty = Object.prototype.hasOwnProperty;\nconst NULL_LANGUAGE_ID = 'vs.editor.nullLanguage';\nexport class LanguageIdCodec {\n    constructor() {\n        this._languageIdToLanguage = [];\n        this._languageToLanguageId = new Map();\n        this._register(NULL_LANGUAGE_ID, 0 /* LanguageId.Null */);\n        this._register(PLAINTEXT_LANGUAGE_ID, 1 /* LanguageId.PlainText */);\n        this._nextLanguageId = 2;\n    }\n    _register(language, languageId) {\n        this._languageIdToLanguage[languageId] = language;\n        this._languageToLanguageId.set(language, languageId);\n    }\n    register(language) {\n        if (this._languageToLanguageId.has(language)) {\n            return;\n        }\n        const languageId = this._nextLanguageId++;\n        this._register(language, languageId);\n    }\n    encodeLanguageId(languageId) {\n        return this._languageToLanguageId.get(languageId) || 0 /* LanguageId.Null */;\n    }\n    decodeLanguageId(languageId) {\n        return this._languageIdToLanguage[languageId] || NULL_LANGUAGE_ID;\n    }\n}\nexport class LanguagesRegistry extends Disposable {\n    static { this.instanceCount = 0; }\n    constructor(useModesRegistry = true, warnOnOverwrite = false) {\n        super();\n        this._onDidChange = this._register(new Emitter());\n        this.onDidChange = this._onDidChange.event;\n        LanguagesRegistry.instanceCount++;\n        this._warnOnOverwrite = warnOnOverwrite;\n        this.languageIdCodec = new LanguageIdCodec();\n        this._dynamicLanguages = [];\n        this._languages = {};\n        this._mimeTypesMap = {};\n        this._nameMap = {};\n        this._lowercaseNameMap = {};\n        if (useModesRegistry) {\n            this._initializeFromRegistry();\n            this._register(ModesRegistry.onDidChangeLanguages((m) => {\n                this._initializeFromRegistry();\n            }));\n        }\n    }\n    dispose() {\n        LanguagesRegistry.instanceCount--;\n        super.dispose();\n    }\n    _initializeFromRegistry() {\n        this._languages = {};\n        this._mimeTypesMap = {};\n        this._nameMap = {};\n        this._lowercaseNameMap = {};\n        clearPlatformLanguageAssociations();\n        const desc = [].concat(ModesRegistry.getLanguages()).concat(this._dynamicLanguages);\n        this._registerLanguages(desc);\n    }\n    _registerLanguages(desc) {\n        for (const d of desc) {\n            this._registerLanguage(d);\n        }\n        // Rebuild fast path maps\n        this._mimeTypesMap = {};\n        this._nameMap = {};\n        this._lowercaseNameMap = {};\n        Object.keys(this._languages).forEach((langId) => {\n            const language = this._languages[langId];\n            if (language.name) {\n                this._nameMap[language.name] = language.identifier;\n            }\n            language.aliases.forEach((alias) => {\n                this._lowercaseNameMap[alias.toLowerCase()] = language.identifier;\n            });\n            language.mimetypes.forEach((mimetype) => {\n                this._mimeTypesMap[mimetype] = language.identifier;\n            });\n        });\n        Registry.as(Extensions.Configuration).registerOverrideIdentifiers(this.getRegisteredLanguageIds());\n        this._onDidChange.fire();\n    }\n    _registerLanguage(lang) {\n        const langId = lang.id;\n        let resolvedLanguage;\n        if (hasOwnProperty.call(this._languages, langId)) {\n            resolvedLanguage = this._languages[langId];\n        }\n        else {\n            this.languageIdCodec.register(langId);\n            resolvedLanguage = {\n                identifier: langId,\n                name: null,\n                mimetypes: [],\n                aliases: [],\n                extensions: [],\n                filenames: [],\n                configurationFiles: [],\n                icons: []\n            };\n            this._languages[langId] = resolvedLanguage;\n        }\n        this._mergeLanguage(resolvedLanguage, lang);\n    }\n    _mergeLanguage(resolvedLanguage, lang) {\n        const langId = lang.id;\n        let primaryMime = null;\n        if (Array.isArray(lang.mimetypes) && lang.mimetypes.length > 0) {\n            resolvedLanguage.mimetypes.push(...lang.mimetypes);\n            primaryMime = lang.mimetypes[0];\n        }\n        if (!primaryMime) {\n            primaryMime = `text/x-${langId}`;\n            resolvedLanguage.mimetypes.push(primaryMime);\n        }\n        if (Array.isArray(lang.extensions)) {\n            if (lang.configuration) {\n                // insert first as this appears to be the 'primary' language definition\n                resolvedLanguage.extensions = lang.extensions.concat(resolvedLanguage.extensions);\n            }\n            else {\n                resolvedLanguage.extensions = resolvedLanguage.extensions.concat(lang.extensions);\n            }\n            for (const extension of lang.extensions) {\n                registerPlatformLanguageAssociation({ id: langId, mime: primaryMime, extension: extension }, this._warnOnOverwrite);\n            }\n        }\n        if (Array.isArray(lang.filenames)) {\n            for (const filename of lang.filenames) {\n                registerPlatformLanguageAssociation({ id: langId, mime: primaryMime, filename: filename }, this._warnOnOverwrite);\n                resolvedLanguage.filenames.push(filename);\n            }\n        }\n        if (Array.isArray(lang.filenamePatterns)) {\n            for (const filenamePattern of lang.filenamePatterns) {\n                registerPlatformLanguageAssociation({ id: langId, mime: primaryMime, filepattern: filenamePattern }, this._warnOnOverwrite);\n            }\n        }\n        if (typeof lang.firstLine === 'string' && lang.firstLine.length > 0) {\n            let firstLineRegexStr = lang.firstLine;\n            if (firstLineRegexStr.charAt(0) !== '^') {\n                firstLineRegexStr = '^' + firstLineRegexStr;\n            }\n            try {\n                const firstLineRegex = new RegExp(firstLineRegexStr);\n                if (!regExpLeadsToEndlessLoop(firstLineRegex)) {\n                    registerPlatformLanguageAssociation({ id: langId, mime: primaryMime, firstline: firstLineRegex }, this._warnOnOverwrite);\n                }\n            }\n            catch (err) {\n                // Most likely, the regex was bad\n                console.warn(`[${lang.id}]: Invalid regular expression \\`${firstLineRegexStr}\\`: `, err);\n            }\n        }\n        resolvedLanguage.aliases.push(langId);\n        let langAliases = null;\n        if (typeof lang.aliases !== 'undefined' && Array.isArray(lang.aliases)) {\n            if (lang.aliases.length === 0) {\n                // signal that this language should not get a name\n                langAliases = [null];\n            }\n            else {\n                langAliases = lang.aliases;\n            }\n        }\n        if (langAliases !== null) {\n            for (const langAlias of langAliases) {\n                if (!langAlias || langAlias.length === 0) {\n                    continue;\n                }\n                resolvedLanguage.aliases.push(langAlias);\n            }\n        }\n        const containsAliases = (langAliases !== null && langAliases.length > 0);\n        if (containsAliases && langAliases[0] === null) {\n            // signal that this language should not get a name\n        }\n        else {\n            const bestName = (containsAliases ? langAliases[0] : null) || langId;\n            if (containsAliases || !resolvedLanguage.name) {\n                resolvedLanguage.name = bestName;\n            }\n        }\n        if (lang.configuration) {\n            resolvedLanguage.configurationFiles.push(lang.configuration);\n        }\n        if (lang.icon) {\n            resolvedLanguage.icons.push(lang.icon);\n        }\n    }\n    isRegisteredLanguageId(languageId) {\n        if (!languageId) {\n            return false;\n        }\n        return hasOwnProperty.call(this._languages, languageId);\n    }\n    getRegisteredLanguageIds() {\n        return Object.keys(this._languages);\n    }\n    getLanguageIdByLanguageName(languageName) {\n        const languageNameLower = languageName.toLowerCase();\n        if (!hasOwnProperty.call(this._lowercaseNameMap, languageNameLower)) {\n            return null;\n        }\n        return this._lowercaseNameMap[languageNameLower];\n    }\n    getLanguageIdByMimeType(mimeType) {\n        if (!mimeType) {\n            return null;\n        }\n        if (hasOwnProperty.call(this._mimeTypesMap, mimeType)) {\n            return this._mimeTypesMap[mimeType];\n        }\n        return null;\n    }\n    guessLanguageIdByFilepathOrFirstLine(resource, firstLine) {\n        if (!resource && !firstLine) {\n            return [];\n        }\n        return getLanguageIds(resource, firstLine);\n    }\n}\n"],"names":["registeredAssociations","nonUserRegisteredAssociations","userRegisteredAssociations","registerPlatformLanguageAssociation","association","warnOnOverwrite","_registerLanguageAssociation","userConfigured","associationItem","undefined","a","console","clearPlatformLanguageAssociations","getLanguageIds","resource","firstLine","getAssociations","path","metadata","filename","configuredLanguage","getAssociationByPath","registeredLanguage","firstlineLanguage","getAssociationByFirstline","i","matches","item","associations","filenameMatch","patternMatch","extensionMatch","target","hasOwnProperty","Object","NULL_LANGUAGE_ID","LanguageIdCodec","Map","language","languageId","LanguagesRegistry","useModesRegistry","m","desc","d","langId","alias","mimetype","lang","resolvedLanguage","primaryMime","Array","extension","filenamePattern","firstLineRegexStr","firstLineRegex","RegExp","err","langAliases","langAlias","containsAliases","bestName","languageName","languageNameLower","mimeType"],"mappings":"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"}