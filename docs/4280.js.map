{"version":3,"file":"4280.js","sources":["webpack://@flowgram.ai/demo-free-layout/./node_modules/.pnpm/monaco-editor@0.52.2/node_modules/monaco-editor/esm/vs/editor/common/core/eolCounter.js","webpack://@flowgram.ai/demo-free-layout/./node_modules/.pnpm/monaco-editor@0.52.2/node_modules/monaco-editor/esm/vs/editor/common/encodedTokenAttributes.js","webpack://@flowgram.ai/demo-free-layout/./node_modules/.pnpm/monaco-editor@0.52.2/node_modules/monaco-editor/esm/vs/editor/common/languages/language.js","webpack://@flowgram.ai/demo-free-layout/./node_modules/.pnpm/monaco-editor@0.52.2/node_modules/monaco-editor/esm/vs/editor/common/tokens/sparseMultilineTokens.js","webpack://@flowgram.ai/demo-free-layout/./node_modules/.pnpm/monaco-editor@0.52.2/node_modules/monaco-editor/esm/vs/editor/common/services/semanticTokensProviderStyling.js","webpack://@flowgram.ai/demo-free-layout/./node_modules/.pnpm/monaco-editor@0.52.2/node_modules/monaco-editor/esm/vs/platform/registry/common/platform.js","webpack://@flowgram.ai/demo-free-layout/./node_modules/.pnpm/monaco-editor@0.52.2/node_modules/monaco-editor/esm/vs/platform/theme/common/theme.js","webpack://@flowgram.ai/demo-free-layout/./node_modules/.pnpm/monaco-editor@0.52.2/node_modules/monaco-editor/esm/vs/platform/theme/common/themeService.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nexport function countEOL(text) {\n    let eolCount = 0;\n    let firstLineLength = 0;\n    let lastLineStart = 0;\n    let eol = 0 /* StringEOL.Unknown */;\n    for (let i = 0, len = text.length; i < len; i++) {\n        const chr = text.charCodeAt(i);\n        if (chr === 13 /* CharCode.CarriageReturn */) {\n            if (eolCount === 0) {\n                firstLineLength = i;\n            }\n            eolCount++;\n            if (i + 1 < len && text.charCodeAt(i + 1) === 10 /* CharCode.LineFeed */) {\n                // \\r\\n... case\n                eol |= 2 /* StringEOL.CRLF */;\n                i++; // skip \\n\n            }\n            else {\n                // \\r... case\n                eol |= 3 /* StringEOL.Invalid */;\n            }\n            lastLineStart = i + 1;\n        }\n        else if (chr === 10 /* CharCode.LineFeed */) {\n            // \\n... case\n            eol |= 1 /* StringEOL.LF */;\n            if (eolCount === 0) {\n                firstLineLength = i;\n            }\n            eolCount++;\n            lastLineStart = i + 1;\n        }\n    }\n    if (eolCount === 0) {\n        firstLineLength = text.length;\n    }\n    return [eolCount, firstLineLength, text.length - lastLineStart, eol];\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n/**\n */\nexport class TokenMetadata {\n    static getLanguageId(metadata) {\n        return (metadata & 255 /* MetadataConsts.LANGUAGEID_MASK */) >>> 0 /* MetadataConsts.LANGUAGEID_OFFSET */;\n    }\n    static getTokenType(metadata) {\n        return (metadata & 768 /* MetadataConsts.TOKEN_TYPE_MASK */) >>> 8 /* MetadataConsts.TOKEN_TYPE_OFFSET */;\n    }\n    static containsBalancedBrackets(metadata) {\n        return (metadata & 1024 /* MetadataConsts.BALANCED_BRACKETS_MASK */) !== 0;\n    }\n    static getFontStyle(metadata) {\n        return (metadata & 30720 /* MetadataConsts.FONT_STYLE_MASK */) >>> 11 /* MetadataConsts.FONT_STYLE_OFFSET */;\n    }\n    static getForeground(metadata) {\n        return (metadata & 16744448 /* MetadataConsts.FOREGROUND_MASK */) >>> 15 /* MetadataConsts.FOREGROUND_OFFSET */;\n    }\n    static getBackground(metadata) {\n        return (metadata & 4278190080 /* MetadataConsts.BACKGROUND_MASK */) >>> 24 /* MetadataConsts.BACKGROUND_OFFSET */;\n    }\n    static getClassNameFromMetadata(metadata) {\n        const foreground = this.getForeground(metadata);\n        let className = 'mtk' + foreground;\n        const fontStyle = this.getFontStyle(metadata);\n        if (fontStyle & 1 /* FontStyle.Italic */) {\n            className += ' mtki';\n        }\n        if (fontStyle & 2 /* FontStyle.Bold */) {\n            className += ' mtkb';\n        }\n        if (fontStyle & 4 /* FontStyle.Underline */) {\n            className += ' mtku';\n        }\n        if (fontStyle & 8 /* FontStyle.Strikethrough */) {\n            className += ' mtks';\n        }\n        return className;\n    }\n    static getInlineStyleFromMetadata(metadata, colorMap) {\n        const foreground = this.getForeground(metadata);\n        const fontStyle = this.getFontStyle(metadata);\n        let result = `color: ${colorMap[foreground]};`;\n        if (fontStyle & 1 /* FontStyle.Italic */) {\n            result += 'font-style: italic;';\n        }\n        if (fontStyle & 2 /* FontStyle.Bold */) {\n            result += 'font-weight: bold;';\n        }\n        let textDecoration = '';\n        if (fontStyle & 4 /* FontStyle.Underline */) {\n            textDecoration += ' underline';\n        }\n        if (fontStyle & 8 /* FontStyle.Strikethrough */) {\n            textDecoration += ' line-through';\n        }\n        if (textDecoration) {\n            result += `text-decoration:${textDecoration};`;\n        }\n        return result;\n    }\n    static getPresentationFromMetadata(metadata) {\n        const foreground = this.getForeground(metadata);\n        const fontStyle = this.getFontStyle(metadata);\n        return {\n            foreground: foreground,\n            italic: Boolean(fontStyle & 1 /* FontStyle.Italic */),\n            bold: Boolean(fontStyle & 2 /* FontStyle.Bold */),\n            underline: Boolean(fontStyle & 4 /* FontStyle.Underline */),\n            strikethrough: Boolean(fontStyle & 8 /* FontStyle.Strikethrough */),\n        };\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { createDecorator } from '../../../platform/instantiation/common/instantiation.js';\nexport const ILanguageService = createDecorator('languageService');\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Position } from '../core/position.js';\nimport { Range } from '../core/range.js';\nimport { countEOL } from '../core/eolCounter.js';\n/**\n * Represents sparse tokens over a contiguous range of lines.\n */\nexport class SparseMultilineTokens {\n    static create(startLineNumber, tokens) {\n        return new SparseMultilineTokens(startLineNumber, new SparseMultilineTokensStorage(tokens));\n    }\n    /**\n     * (Inclusive) start line number for these tokens.\n     */\n    get startLineNumber() {\n        return this._startLineNumber;\n    }\n    /**\n     * (Inclusive) end line number for these tokens.\n     */\n    get endLineNumber() {\n        return this._endLineNumber;\n    }\n    constructor(startLineNumber, tokens) {\n        this._startLineNumber = startLineNumber;\n        this._tokens = tokens;\n        this._endLineNumber = this._startLineNumber + this._tokens.getMaxDeltaLine();\n    }\n    toString() {\n        return this._tokens.toString(this._startLineNumber);\n    }\n    _updateEndLineNumber() {\n        this._endLineNumber = this._startLineNumber + this._tokens.getMaxDeltaLine();\n    }\n    isEmpty() {\n        return this._tokens.isEmpty();\n    }\n    getLineTokens(lineNumber) {\n        if (this._startLineNumber <= lineNumber && lineNumber <= this._endLineNumber) {\n            return this._tokens.getLineTokens(lineNumber - this._startLineNumber);\n        }\n        return null;\n    }\n    getRange() {\n        const deltaRange = this._tokens.getRange();\n        if (!deltaRange) {\n            return deltaRange;\n        }\n        return new Range(this._startLineNumber + deltaRange.startLineNumber, deltaRange.startColumn, this._startLineNumber + deltaRange.endLineNumber, deltaRange.endColumn);\n    }\n    removeTokens(range) {\n        const startLineIndex = range.startLineNumber - this._startLineNumber;\n        const endLineIndex = range.endLineNumber - this._startLineNumber;\n        this._startLineNumber += this._tokens.removeTokens(startLineIndex, range.startColumn - 1, endLineIndex, range.endColumn - 1);\n        this._updateEndLineNumber();\n    }\n    split(range) {\n        // split tokens to two:\n        // a) all the tokens before `range`\n        // b) all the tokens after `range`\n        const startLineIndex = range.startLineNumber - this._startLineNumber;\n        const endLineIndex = range.endLineNumber - this._startLineNumber;\n        const [a, b, bDeltaLine] = this._tokens.split(startLineIndex, range.startColumn - 1, endLineIndex, range.endColumn - 1);\n        return [new SparseMultilineTokens(this._startLineNumber, a), new SparseMultilineTokens(this._startLineNumber + bDeltaLine, b)];\n    }\n    applyEdit(range, text) {\n        const [eolCount, firstLineLength, lastLineLength] = countEOL(text);\n        this.acceptEdit(range, eolCount, firstLineLength, lastLineLength, text.length > 0 ? text.charCodeAt(0) : 0 /* CharCode.Null */);\n    }\n    acceptEdit(range, eolCount, firstLineLength, lastLineLength, firstCharCode) {\n        this._acceptDeleteRange(range);\n        this._acceptInsertText(new Position(range.startLineNumber, range.startColumn), eolCount, firstLineLength, lastLineLength, firstCharCode);\n        this._updateEndLineNumber();\n    }\n    _acceptDeleteRange(range) {\n        if (range.startLineNumber === range.endLineNumber && range.startColumn === range.endColumn) {\n            // Nothing to delete\n            return;\n        }\n        const firstLineIndex = range.startLineNumber - this._startLineNumber;\n        const lastLineIndex = range.endLineNumber - this._startLineNumber;\n        if (lastLineIndex < 0) {\n            // this deletion occurs entirely before this block, so we only need to adjust line numbers\n            const deletedLinesCount = lastLineIndex - firstLineIndex;\n            this._startLineNumber -= deletedLinesCount;\n            return;\n        }\n        const tokenMaxDeltaLine = this._tokens.getMaxDeltaLine();\n        if (firstLineIndex >= tokenMaxDeltaLine + 1) {\n            // this deletion occurs entirely after this block, so there is nothing to do\n            return;\n        }\n        if (firstLineIndex < 0 && lastLineIndex >= tokenMaxDeltaLine + 1) {\n            // this deletion completely encompasses this block\n            this._startLineNumber = 0;\n            this._tokens.clear();\n            return;\n        }\n        if (firstLineIndex < 0) {\n            const deletedBefore = -firstLineIndex;\n            this._startLineNumber -= deletedBefore;\n            this._tokens.acceptDeleteRange(range.startColumn - 1, 0, 0, lastLineIndex, range.endColumn - 1);\n        }\n        else {\n            this._tokens.acceptDeleteRange(0, firstLineIndex, range.startColumn - 1, lastLineIndex, range.endColumn - 1);\n        }\n    }\n    _acceptInsertText(position, eolCount, firstLineLength, lastLineLength, firstCharCode) {\n        if (eolCount === 0 && firstLineLength === 0) {\n            // Nothing to insert\n            return;\n        }\n        const lineIndex = position.lineNumber - this._startLineNumber;\n        if (lineIndex < 0) {\n            // this insertion occurs before this block, so we only need to adjust line numbers\n            this._startLineNumber += eolCount;\n            return;\n        }\n        const tokenMaxDeltaLine = this._tokens.getMaxDeltaLine();\n        if (lineIndex >= tokenMaxDeltaLine + 1) {\n            // this insertion occurs after this block, so there is nothing to do\n            return;\n        }\n        this._tokens.acceptInsertText(lineIndex, position.column - 1, eolCount, firstLineLength, lastLineLength, firstCharCode);\n    }\n}\nclass SparseMultilineTokensStorage {\n    constructor(tokens) {\n        this._tokens = tokens;\n        this._tokenCount = tokens.length / 4;\n    }\n    toString(startLineNumber) {\n        const pieces = [];\n        for (let i = 0; i < this._tokenCount; i++) {\n            pieces.push(`(${this._getDeltaLine(i) + startLineNumber},${this._getStartCharacter(i)}-${this._getEndCharacter(i)})`);\n        }\n        return `[${pieces.join(',')}]`;\n    }\n    getMaxDeltaLine() {\n        const tokenCount = this._getTokenCount();\n        if (tokenCount === 0) {\n            return -1;\n        }\n        return this._getDeltaLine(tokenCount - 1);\n    }\n    getRange() {\n        const tokenCount = this._getTokenCount();\n        if (tokenCount === 0) {\n            return null;\n        }\n        const startChar = this._getStartCharacter(0);\n        const maxDeltaLine = this._getDeltaLine(tokenCount - 1);\n        const endChar = this._getEndCharacter(tokenCount - 1);\n        return new Range(0, startChar + 1, maxDeltaLine, endChar + 1);\n    }\n    _getTokenCount() {\n        return this._tokenCount;\n    }\n    _getDeltaLine(tokenIndex) {\n        return this._tokens[4 * tokenIndex];\n    }\n    _getStartCharacter(tokenIndex) {\n        return this._tokens[4 * tokenIndex + 1];\n    }\n    _getEndCharacter(tokenIndex) {\n        return this._tokens[4 * tokenIndex + 2];\n    }\n    isEmpty() {\n        return (this._getTokenCount() === 0);\n    }\n    getLineTokens(deltaLine) {\n        let low = 0;\n        let high = this._getTokenCount() - 1;\n        while (low < high) {\n            const mid = low + Math.floor((high - low) / 2);\n            const midDeltaLine = this._getDeltaLine(mid);\n            if (midDeltaLine < deltaLine) {\n                low = mid + 1;\n            }\n            else if (midDeltaLine > deltaLine) {\n                high = mid - 1;\n            }\n            else {\n                let min = mid;\n                while (min > low && this._getDeltaLine(min - 1) === deltaLine) {\n                    min--;\n                }\n                let max = mid;\n                while (max < high && this._getDeltaLine(max + 1) === deltaLine) {\n                    max++;\n                }\n                return new SparseLineTokens(this._tokens.subarray(4 * min, 4 * max + 4));\n            }\n        }\n        if (this._getDeltaLine(low) === deltaLine) {\n            return new SparseLineTokens(this._tokens.subarray(4 * low, 4 * low + 4));\n        }\n        return null;\n    }\n    clear() {\n        this._tokenCount = 0;\n    }\n    removeTokens(startDeltaLine, startChar, endDeltaLine, endChar) {\n        const tokens = this._tokens;\n        const tokenCount = this._tokenCount;\n        let newTokenCount = 0;\n        let hasDeletedTokens = false;\n        let firstDeltaLine = 0;\n        for (let i = 0; i < tokenCount; i++) {\n            const srcOffset = 4 * i;\n            const tokenDeltaLine = tokens[srcOffset];\n            const tokenStartCharacter = tokens[srcOffset + 1];\n            const tokenEndCharacter = tokens[srcOffset + 2];\n            const tokenMetadata = tokens[srcOffset + 3];\n            if ((tokenDeltaLine > startDeltaLine || (tokenDeltaLine === startDeltaLine && tokenEndCharacter >= startChar))\n                && (tokenDeltaLine < endDeltaLine || (tokenDeltaLine === endDeltaLine && tokenStartCharacter <= endChar))) {\n                hasDeletedTokens = true;\n            }\n            else {\n                if (newTokenCount === 0) {\n                    firstDeltaLine = tokenDeltaLine;\n                }\n                if (hasDeletedTokens) {\n                    // must move the token to the left\n                    const destOffset = 4 * newTokenCount;\n                    tokens[destOffset] = tokenDeltaLine - firstDeltaLine;\n                    tokens[destOffset + 1] = tokenStartCharacter;\n                    tokens[destOffset + 2] = tokenEndCharacter;\n                    tokens[destOffset + 3] = tokenMetadata;\n                }\n                newTokenCount++;\n            }\n        }\n        this._tokenCount = newTokenCount;\n        return firstDeltaLine;\n    }\n    split(startDeltaLine, startChar, endDeltaLine, endChar) {\n        const tokens = this._tokens;\n        const tokenCount = this._tokenCount;\n        const aTokens = [];\n        const bTokens = [];\n        let destTokens = aTokens;\n        let destOffset = 0;\n        let destFirstDeltaLine = 0;\n        for (let i = 0; i < tokenCount; i++) {\n            const srcOffset = 4 * i;\n            const tokenDeltaLine = tokens[srcOffset];\n            const tokenStartCharacter = tokens[srcOffset + 1];\n            const tokenEndCharacter = tokens[srcOffset + 2];\n            const tokenMetadata = tokens[srcOffset + 3];\n            if ((tokenDeltaLine > startDeltaLine || (tokenDeltaLine === startDeltaLine && tokenEndCharacter >= startChar))) {\n                if ((tokenDeltaLine < endDeltaLine || (tokenDeltaLine === endDeltaLine && tokenStartCharacter <= endChar))) {\n                    // this token is touching the range\n                    continue;\n                }\n                else {\n                    // this token is after the range\n                    if (destTokens !== bTokens) {\n                        // this token is the first token after the range\n                        destTokens = bTokens;\n                        destOffset = 0;\n                        destFirstDeltaLine = tokenDeltaLine;\n                    }\n                }\n            }\n            destTokens[destOffset++] = tokenDeltaLine - destFirstDeltaLine;\n            destTokens[destOffset++] = tokenStartCharacter;\n            destTokens[destOffset++] = tokenEndCharacter;\n            destTokens[destOffset++] = tokenMetadata;\n        }\n        return [new SparseMultilineTokensStorage(new Uint32Array(aTokens)), new SparseMultilineTokensStorage(new Uint32Array(bTokens)), destFirstDeltaLine];\n    }\n    acceptDeleteRange(horizontalShiftForFirstLineTokens, startDeltaLine, startCharacter, endDeltaLine, endCharacter) {\n        // This is a bit complex, here are the cases I used to think about this:\n        //\n        // 1. The token starts before the deletion range\n        // 1a. The token is completely before the deletion range\n        //               -----------\n        //                          xxxxxxxxxxx\n        // 1b. The token starts before, the deletion range ends after the token\n        //               -----------\n        //                      xxxxxxxxxxx\n        // 1c. The token starts before, the deletion range ends precisely with the token\n        //               ---------------\n        //                      xxxxxxxx\n        // 1d. The token starts before, the deletion range is inside the token\n        //               ---------------\n        //                    xxxxx\n        //\n        // 2. The token starts at the same position with the deletion range\n        // 2a. The token starts at the same position, and ends inside the deletion range\n        //               -------\n        //               xxxxxxxxxxx\n        // 2b. The token starts at the same position, and ends at the same position as the deletion range\n        //               ----------\n        //               xxxxxxxxxx\n        // 2c. The token starts at the same position, and ends after the deletion range\n        //               -------------\n        //               xxxxxxx\n        //\n        // 3. The token starts inside the deletion range\n        // 3a. The token is inside the deletion range\n        //                -------\n        //             xxxxxxxxxxxxx\n        // 3b. The token starts inside the deletion range, and ends at the same position as the deletion range\n        //                ----------\n        //             xxxxxxxxxxxxx\n        // 3c. The token starts inside the deletion range, and ends after the deletion range\n        //                ------------\n        //             xxxxxxxxxxx\n        //\n        // 4. The token starts after the deletion range\n        //                  -----------\n        //          xxxxxxxx\n        //\n        const tokens = this._tokens;\n        const tokenCount = this._tokenCount;\n        const deletedLineCount = (endDeltaLine - startDeltaLine);\n        let newTokenCount = 0;\n        let hasDeletedTokens = false;\n        for (let i = 0; i < tokenCount; i++) {\n            const srcOffset = 4 * i;\n            let tokenDeltaLine = tokens[srcOffset];\n            let tokenStartCharacter = tokens[srcOffset + 1];\n            let tokenEndCharacter = tokens[srcOffset + 2];\n            const tokenMetadata = tokens[srcOffset + 3];\n            if (tokenDeltaLine < startDeltaLine || (tokenDeltaLine === startDeltaLine && tokenEndCharacter <= startCharacter)) {\n                // 1a. The token is completely before the deletion range\n                // => nothing to do\n                newTokenCount++;\n                continue;\n            }\n            else if (tokenDeltaLine === startDeltaLine && tokenStartCharacter < startCharacter) {\n                // 1b, 1c, 1d\n                // => the token survives, but it needs to shrink\n                if (tokenDeltaLine === endDeltaLine && tokenEndCharacter > endCharacter) {\n                    // 1d. The token starts before, the deletion range is inside the token\n                    // => the token shrinks by the deletion character count\n                    tokenEndCharacter -= (endCharacter - startCharacter);\n                }\n                else {\n                    // 1b. The token starts before, the deletion range ends after the token\n                    // 1c. The token starts before, the deletion range ends precisely with the token\n                    // => the token shrinks its ending to the deletion start\n                    tokenEndCharacter = startCharacter;\n                }\n            }\n            else if (tokenDeltaLine === startDeltaLine && tokenStartCharacter === startCharacter) {\n                // 2a, 2b, 2c\n                if (tokenDeltaLine === endDeltaLine && tokenEndCharacter > endCharacter) {\n                    // 2c. The token starts at the same position, and ends after the deletion range\n                    // => the token shrinks by the deletion character count\n                    tokenEndCharacter -= (endCharacter - startCharacter);\n                }\n                else {\n                    // 2a. The token starts at the same position, and ends inside the deletion range\n                    // 2b. The token starts at the same position, and ends at the same position as the deletion range\n                    // => the token is deleted\n                    hasDeletedTokens = true;\n                    continue;\n                }\n            }\n            else if (tokenDeltaLine < endDeltaLine || (tokenDeltaLine === endDeltaLine && tokenStartCharacter < endCharacter)) {\n                // 3a, 3b, 3c\n                if (tokenDeltaLine === endDeltaLine && tokenEndCharacter > endCharacter) {\n                    // 3c. The token starts inside the deletion range, and ends after the deletion range\n                    // => the token moves to continue right after the deletion\n                    tokenDeltaLine = startDeltaLine;\n                    tokenStartCharacter = startCharacter;\n                    tokenEndCharacter = tokenStartCharacter + (tokenEndCharacter - endCharacter);\n                }\n                else {\n                    // 3a. The token is inside the deletion range\n                    // 3b. The token starts inside the deletion range, and ends at the same position as the deletion range\n                    // => the token is deleted\n                    hasDeletedTokens = true;\n                    continue;\n                }\n            }\n            else if (tokenDeltaLine > endDeltaLine) {\n                // 4. (partial) The token starts after the deletion range, on a line below...\n                if (deletedLineCount === 0 && !hasDeletedTokens) {\n                    // early stop, there is no need to walk all the tokens and do nothing...\n                    newTokenCount = tokenCount;\n                    break;\n                }\n                tokenDeltaLine -= deletedLineCount;\n            }\n            else if (tokenDeltaLine === endDeltaLine && tokenStartCharacter >= endCharacter) {\n                // 4. (continued) The token starts after the deletion range, on the last line where a deletion occurs\n                if (horizontalShiftForFirstLineTokens && tokenDeltaLine === 0) {\n                    tokenStartCharacter += horizontalShiftForFirstLineTokens;\n                    tokenEndCharacter += horizontalShiftForFirstLineTokens;\n                }\n                tokenDeltaLine -= deletedLineCount;\n                tokenStartCharacter -= (endCharacter - startCharacter);\n                tokenEndCharacter -= (endCharacter - startCharacter);\n            }\n            else {\n                throw new Error(`Not possible!`);\n            }\n            const destOffset = 4 * newTokenCount;\n            tokens[destOffset] = tokenDeltaLine;\n            tokens[destOffset + 1] = tokenStartCharacter;\n            tokens[destOffset + 2] = tokenEndCharacter;\n            tokens[destOffset + 3] = tokenMetadata;\n            newTokenCount++;\n        }\n        this._tokenCount = newTokenCount;\n    }\n    acceptInsertText(deltaLine, character, eolCount, firstLineLength, lastLineLength, firstCharCode) {\n        // Here are the cases I used to think about this:\n        //\n        // 1. The token is completely before the insertion point\n        //            -----------   |\n        // 2. The token ends precisely at the insertion point\n        //            -----------|\n        // 3. The token contains the insertion point\n        //            -----|------\n        // 4. The token starts precisely at the insertion point\n        //            |-----------\n        // 5. The token is completely after the insertion point\n        //            |   -----------\n        //\n        const isInsertingPreciselyOneWordCharacter = (eolCount === 0\n            && firstLineLength === 1\n            && ((firstCharCode >= 48 /* CharCode.Digit0 */ && firstCharCode <= 57 /* CharCode.Digit9 */)\n                || (firstCharCode >= 65 /* CharCode.A */ && firstCharCode <= 90 /* CharCode.Z */)\n                || (firstCharCode >= 97 /* CharCode.a */ && firstCharCode <= 122 /* CharCode.z */)));\n        const tokens = this._tokens;\n        const tokenCount = this._tokenCount;\n        for (let i = 0; i < tokenCount; i++) {\n            const offset = 4 * i;\n            let tokenDeltaLine = tokens[offset];\n            let tokenStartCharacter = tokens[offset + 1];\n            let tokenEndCharacter = tokens[offset + 2];\n            if (tokenDeltaLine < deltaLine || (tokenDeltaLine === deltaLine && tokenEndCharacter < character)) {\n                // 1. The token is completely before the insertion point\n                // => nothing to do\n                continue;\n            }\n            else if (tokenDeltaLine === deltaLine && tokenEndCharacter === character) {\n                // 2. The token ends precisely at the insertion point\n                // => expand the end character only if inserting precisely one character that is a word character\n                if (isInsertingPreciselyOneWordCharacter) {\n                    tokenEndCharacter += 1;\n                }\n                else {\n                    continue;\n                }\n            }\n            else if (tokenDeltaLine === deltaLine && tokenStartCharacter < character && character < tokenEndCharacter) {\n                // 3. The token contains the insertion point\n                if (eolCount === 0) {\n                    // => just expand the end character\n                    tokenEndCharacter += firstLineLength;\n                }\n                else {\n                    // => cut off the token\n                    tokenEndCharacter = character;\n                }\n            }\n            else {\n                // 4. or 5.\n                if (tokenDeltaLine === deltaLine && tokenStartCharacter === character) {\n                    // 4. The token starts precisely at the insertion point\n                    // => grow the token (by keeping its start constant) only if inserting precisely one character that is a word character\n                    // => otherwise behave as in case 5.\n                    if (isInsertingPreciselyOneWordCharacter) {\n                        continue;\n                    }\n                }\n                // => the token must move and keep its size constant\n                if (tokenDeltaLine === deltaLine) {\n                    tokenDeltaLine += eolCount;\n                    // this token is on the line where the insertion is taking place\n                    if (eolCount === 0) {\n                        tokenStartCharacter += firstLineLength;\n                        tokenEndCharacter += firstLineLength;\n                    }\n                    else {\n                        const tokenLength = tokenEndCharacter - tokenStartCharacter;\n                        tokenStartCharacter = lastLineLength + (tokenStartCharacter - character);\n                        tokenEndCharacter = tokenStartCharacter + tokenLength;\n                    }\n                }\n                else {\n                    tokenDeltaLine += eolCount;\n                }\n            }\n            tokens[offset] = tokenDeltaLine;\n            tokens[offset + 1] = tokenStartCharacter;\n            tokens[offset + 2] = tokenEndCharacter;\n        }\n    }\n}\nexport class SparseLineTokens {\n    constructor(tokens) {\n        this._tokens = tokens;\n    }\n    getCount() {\n        return this._tokens.length / 4;\n    }\n    getStartCharacter(tokenIndex) {\n        return this._tokens[4 * tokenIndex + 1];\n    }\n    getEndCharacter(tokenIndex) {\n        return this._tokens[4 * tokenIndex + 2];\n    }\n    getMetadata(tokenIndex) {\n        return this._tokens[4 * tokenIndex + 3];\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nimport { TokenMetadata } from '../encodedTokenAttributes.js';\nimport { IThemeService } from '../../../platform/theme/common/themeService.js';\nimport { ILogService, LogLevel } from '../../../platform/log/common/log.js';\nimport { SparseMultilineTokens } from '../tokens/sparseMultilineTokens.js';\nimport { ILanguageService } from '../languages/language.js';\nconst ENABLE_TRACE = false;\nlet SemanticTokensProviderStyling = class SemanticTokensProviderStyling {\n    constructor(_legend, _themeService, _languageService, _logService) {\n        this._legend = _legend;\n        this._themeService = _themeService;\n        this._languageService = _languageService;\n        this._logService = _logService;\n        this._hasWarnedOverlappingTokens = false;\n        this._hasWarnedInvalidLengthTokens = false;\n        this._hasWarnedInvalidEditStart = false;\n        this._hashTable = new HashTable();\n    }\n    getMetadata(tokenTypeIndex, tokenModifierSet, languageId) {\n        const encodedLanguageId = this._languageService.languageIdCodec.encodeLanguageId(languageId);\n        const entry = this._hashTable.get(tokenTypeIndex, tokenModifierSet, encodedLanguageId);\n        let metadata;\n        if (entry) {\n            metadata = entry.metadata;\n            if (ENABLE_TRACE && this._logService.getLevel() === LogLevel.Trace) {\n                this._logService.trace(`SemanticTokensProviderStyling [CACHED] ${tokenTypeIndex} / ${tokenModifierSet}: foreground ${TokenMetadata.getForeground(metadata)}, fontStyle ${TokenMetadata.getFontStyle(metadata).toString(2)}`);\n            }\n        }\n        else {\n            let tokenType = this._legend.tokenTypes[tokenTypeIndex];\n            const tokenModifiers = [];\n            if (tokenType) {\n                let modifierSet = tokenModifierSet;\n                for (let modifierIndex = 0; modifierSet > 0 && modifierIndex < this._legend.tokenModifiers.length; modifierIndex++) {\n                    if (modifierSet & 1) {\n                        tokenModifiers.push(this._legend.tokenModifiers[modifierIndex]);\n                    }\n                    modifierSet = modifierSet >> 1;\n                }\n                if (ENABLE_TRACE && modifierSet > 0 && this._logService.getLevel() === LogLevel.Trace) {\n                    this._logService.trace(`SemanticTokensProviderStyling: unknown token modifier index: ${tokenModifierSet.toString(2)} for legend: ${JSON.stringify(this._legend.tokenModifiers)}`);\n                    tokenModifiers.push('not-in-legend');\n                }\n                const tokenStyle = this._themeService.getColorTheme().getTokenStyleMetadata(tokenType, tokenModifiers, languageId);\n                if (typeof tokenStyle === 'undefined') {\n                    metadata = 2147483647 /* SemanticTokensProviderStylingConstants.NO_STYLING */;\n                }\n                else {\n                    metadata = 0;\n                    if (typeof tokenStyle.italic !== 'undefined') {\n                        const italicBit = (tokenStyle.italic ? 1 /* FontStyle.Italic */ : 0) << 11 /* MetadataConsts.FONT_STYLE_OFFSET */;\n                        metadata |= italicBit | 1 /* MetadataConsts.SEMANTIC_USE_ITALIC */;\n                    }\n                    if (typeof tokenStyle.bold !== 'undefined') {\n                        const boldBit = (tokenStyle.bold ? 2 /* FontStyle.Bold */ : 0) << 11 /* MetadataConsts.FONT_STYLE_OFFSET */;\n                        metadata |= boldBit | 2 /* MetadataConsts.SEMANTIC_USE_BOLD */;\n                    }\n                    if (typeof tokenStyle.underline !== 'undefined') {\n                        const underlineBit = (tokenStyle.underline ? 4 /* FontStyle.Underline */ : 0) << 11 /* MetadataConsts.FONT_STYLE_OFFSET */;\n                        metadata |= underlineBit | 4 /* MetadataConsts.SEMANTIC_USE_UNDERLINE */;\n                    }\n                    if (typeof tokenStyle.strikethrough !== 'undefined') {\n                        const strikethroughBit = (tokenStyle.strikethrough ? 8 /* FontStyle.Strikethrough */ : 0) << 11 /* MetadataConsts.FONT_STYLE_OFFSET */;\n                        metadata |= strikethroughBit | 8 /* MetadataConsts.SEMANTIC_USE_STRIKETHROUGH */;\n                    }\n                    if (tokenStyle.foreground) {\n                        const foregroundBits = (tokenStyle.foreground) << 15 /* MetadataConsts.FOREGROUND_OFFSET */;\n                        metadata |= foregroundBits | 16 /* MetadataConsts.SEMANTIC_USE_FOREGROUND */;\n                    }\n                    if (metadata === 0) {\n                        // Nothing!\n                        metadata = 2147483647 /* SemanticTokensProviderStylingConstants.NO_STYLING */;\n                    }\n                }\n            }\n            else {\n                if (ENABLE_TRACE && this._logService.getLevel() === LogLevel.Trace) {\n                    this._logService.trace(`SemanticTokensProviderStyling: unknown token type index: ${tokenTypeIndex} for legend: ${JSON.stringify(this._legend.tokenTypes)}`);\n                }\n                metadata = 2147483647 /* SemanticTokensProviderStylingConstants.NO_STYLING */;\n                tokenType = 'not-in-legend';\n            }\n            this._hashTable.add(tokenTypeIndex, tokenModifierSet, encodedLanguageId, metadata);\n            if (ENABLE_TRACE && this._logService.getLevel() === LogLevel.Trace) {\n                this._logService.trace(`SemanticTokensProviderStyling ${tokenTypeIndex} (${tokenType}) / ${tokenModifierSet} (${tokenModifiers.join(' ')}): foreground ${TokenMetadata.getForeground(metadata)}, fontStyle ${TokenMetadata.getFontStyle(metadata).toString(2)}`);\n            }\n        }\n        return metadata;\n    }\n    warnOverlappingSemanticTokens(lineNumber, startColumn) {\n        if (!this._hasWarnedOverlappingTokens) {\n            this._hasWarnedOverlappingTokens = true;\n            this._logService.warn(`Overlapping semantic tokens detected at lineNumber ${lineNumber}, column ${startColumn}`);\n        }\n    }\n    warnInvalidLengthSemanticTokens(lineNumber, startColumn) {\n        if (!this._hasWarnedInvalidLengthTokens) {\n            this._hasWarnedInvalidLengthTokens = true;\n            this._logService.warn(`Semantic token with invalid length detected at lineNumber ${lineNumber}, column ${startColumn}`);\n        }\n    }\n    warnInvalidEditStart(previousResultId, resultId, editIndex, editStart, maxExpectedStart) {\n        if (!this._hasWarnedInvalidEditStart) {\n            this._hasWarnedInvalidEditStart = true;\n            this._logService.warn(`Invalid semantic tokens edit detected (previousResultId: ${previousResultId}, resultId: ${resultId}) at edit #${editIndex}: The provided start offset ${editStart} is outside the previous data (length ${maxExpectedStart}).`);\n        }\n    }\n};\nSemanticTokensProviderStyling = __decorate([\n    __param(1, IThemeService),\n    __param(2, ILanguageService),\n    __param(3, ILogService)\n], SemanticTokensProviderStyling);\nexport { SemanticTokensProviderStyling };\nexport function toMultilineTokens2(tokens, styling, languageId) {\n    const srcData = tokens.data;\n    const tokenCount = (tokens.data.length / 5) | 0;\n    const tokensPerArea = Math.max(Math.ceil(tokenCount / 1024 /* SemanticColoringConstants.DesiredMaxAreas */), 400 /* SemanticColoringConstants.DesiredTokensPerArea */);\n    const result = [];\n    let tokenIndex = 0;\n    let lastLineNumber = 1;\n    let lastStartCharacter = 0;\n    while (tokenIndex < tokenCount) {\n        const tokenStartIndex = tokenIndex;\n        let tokenEndIndex = Math.min(tokenStartIndex + tokensPerArea, tokenCount);\n        // Keep tokens on the same line in the same area...\n        if (tokenEndIndex < tokenCount) {\n            let smallTokenEndIndex = tokenEndIndex;\n            while (smallTokenEndIndex - 1 > tokenStartIndex && srcData[5 * smallTokenEndIndex] === 0) {\n                smallTokenEndIndex--;\n            }\n            if (smallTokenEndIndex - 1 === tokenStartIndex) {\n                // there are so many tokens on this line that our area would be empty, we must now go right\n                let bigTokenEndIndex = tokenEndIndex;\n                while (bigTokenEndIndex + 1 < tokenCount && srcData[5 * bigTokenEndIndex] === 0) {\n                    bigTokenEndIndex++;\n                }\n                tokenEndIndex = bigTokenEndIndex;\n            }\n            else {\n                tokenEndIndex = smallTokenEndIndex;\n            }\n        }\n        let destData = new Uint32Array((tokenEndIndex - tokenStartIndex) * 4);\n        let destOffset = 0;\n        let areaLine = 0;\n        let prevLineNumber = 0;\n        let prevEndCharacter = 0;\n        while (tokenIndex < tokenEndIndex) {\n            const srcOffset = 5 * tokenIndex;\n            const deltaLine = srcData[srcOffset];\n            const deltaCharacter = srcData[srcOffset + 1];\n            // Casting both `lineNumber`, `startCharacter` and `endCharacter` here to uint32 using `|0`\n            // to validate below with the actual values that will be inserted in the Uint32Array result\n            const lineNumber = (lastLineNumber + deltaLine) | 0;\n            const startCharacter = (deltaLine === 0 ? (lastStartCharacter + deltaCharacter) | 0 : deltaCharacter);\n            const length = srcData[srcOffset + 2];\n            const endCharacter = (startCharacter + length) | 0;\n            const tokenTypeIndex = srcData[srcOffset + 3];\n            const tokenModifierSet = srcData[srcOffset + 4];\n            if (endCharacter <= startCharacter) {\n                // this token is invalid (most likely a negative length casted to uint32)\n                styling.warnInvalidLengthSemanticTokens(lineNumber, startCharacter + 1);\n            }\n            else if (prevLineNumber === lineNumber && prevEndCharacter > startCharacter) {\n                // this token overlaps with the previous token\n                styling.warnOverlappingSemanticTokens(lineNumber, startCharacter + 1);\n            }\n            else {\n                const metadata = styling.getMetadata(tokenTypeIndex, tokenModifierSet, languageId);\n                if (metadata !== 2147483647 /* SemanticTokensProviderStylingConstants.NO_STYLING */) {\n                    if (areaLine === 0) {\n                        areaLine = lineNumber;\n                    }\n                    destData[destOffset] = lineNumber - areaLine;\n                    destData[destOffset + 1] = startCharacter;\n                    destData[destOffset + 2] = endCharacter;\n                    destData[destOffset + 3] = metadata;\n                    destOffset += 4;\n                    prevLineNumber = lineNumber;\n                    prevEndCharacter = endCharacter;\n                }\n            }\n            lastLineNumber = lineNumber;\n            lastStartCharacter = startCharacter;\n            tokenIndex++;\n        }\n        if (destOffset !== destData.length) {\n            destData = destData.subarray(0, destOffset);\n        }\n        const tokens = SparseMultilineTokens.create(areaLine, destData);\n        result.push(tokens);\n    }\n    return result;\n}\nclass HashTableEntry {\n    constructor(tokenTypeIndex, tokenModifierSet, languageId, metadata) {\n        this.tokenTypeIndex = tokenTypeIndex;\n        this.tokenModifierSet = tokenModifierSet;\n        this.languageId = languageId;\n        this.metadata = metadata;\n        this.next = null;\n    }\n}\nclass HashTable {\n    static { this._SIZES = [3, 7, 13, 31, 61, 127, 251, 509, 1021, 2039, 4093, 8191, 16381, 32749, 65521, 131071, 262139, 524287, 1048573, 2097143]; }\n    constructor() {\n        this._elementsCount = 0;\n        this._currentLengthIndex = 0;\n        this._currentLength = HashTable._SIZES[this._currentLengthIndex];\n        this._growCount = Math.round(this._currentLengthIndex + 1 < HashTable._SIZES.length ? 2 / 3 * this._currentLength : 0);\n        this._elements = [];\n        HashTable._nullOutEntries(this._elements, this._currentLength);\n    }\n    static _nullOutEntries(entries, length) {\n        for (let i = 0; i < length; i++) {\n            entries[i] = null;\n        }\n    }\n    _hash2(n1, n2) {\n        return (((n1 << 5) - n1) + n2) | 0; // n1 * 31 + n2, keep as int32\n    }\n    _hashFunc(tokenTypeIndex, tokenModifierSet, languageId) {\n        return this._hash2(this._hash2(tokenTypeIndex, tokenModifierSet), languageId) % this._currentLength;\n    }\n    get(tokenTypeIndex, tokenModifierSet, languageId) {\n        const hash = this._hashFunc(tokenTypeIndex, tokenModifierSet, languageId);\n        let p = this._elements[hash];\n        while (p) {\n            if (p.tokenTypeIndex === tokenTypeIndex && p.tokenModifierSet === tokenModifierSet && p.languageId === languageId) {\n                return p;\n            }\n            p = p.next;\n        }\n        return null;\n    }\n    add(tokenTypeIndex, tokenModifierSet, languageId, metadata) {\n        this._elementsCount++;\n        if (this._growCount !== 0 && this._elementsCount >= this._growCount) {\n            // expand!\n            const oldElements = this._elements;\n            this._currentLengthIndex++;\n            this._currentLength = HashTable._SIZES[this._currentLengthIndex];\n            this._growCount = Math.round(this._currentLengthIndex + 1 < HashTable._SIZES.length ? 2 / 3 * this._currentLength : 0);\n            this._elements = [];\n            HashTable._nullOutEntries(this._elements, this._currentLength);\n            for (const first of oldElements) {\n                let p = first;\n                while (p) {\n                    const oldNext = p.next;\n                    p.next = null;\n                    this._add(p);\n                    p = oldNext;\n                }\n            }\n        }\n        this._add(new HashTableEntry(tokenTypeIndex, tokenModifierSet, languageId, metadata));\n    }\n    _add(element) {\n        const hash = this._hashFunc(element.tokenTypeIndex, element.tokenModifierSet, element.languageId);\n        element.next = this._elements[hash];\n        this._elements[hash] = element;\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as Assert from '../../../base/common/assert.js';\nimport * as Types from '../../../base/common/types.js';\nclass RegistryImpl {\n    constructor() {\n        this.data = new Map();\n    }\n    add(id, data) {\n        Assert.ok(Types.isString(id));\n        Assert.ok(Types.isObject(data));\n        Assert.ok(!this.data.has(id), 'There is already an extension with this id');\n        this.data.set(id, data);\n    }\n    as(id) {\n        return this.data.get(id) || null;\n    }\n}\nexport const Registry = new RegistryImpl();\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n/**\n * Color scheme used by the OS and by color themes.\n */\nexport var ColorScheme;\n(function (ColorScheme) {\n    ColorScheme[\"DARK\"] = \"dark\";\n    ColorScheme[\"LIGHT\"] = \"light\";\n    ColorScheme[\"HIGH_CONTRAST_DARK\"] = \"hcDark\";\n    ColorScheme[\"HIGH_CONTRAST_LIGHT\"] = \"hcLight\";\n})(ColorScheme || (ColorScheme = {}));\nexport function isHighContrast(scheme) {\n    return scheme === ColorScheme.HIGH_CONTRAST_DARK || scheme === ColorScheme.HIGH_CONTRAST_LIGHT;\n}\nexport function isDark(scheme) {\n    return scheme === ColorScheme.DARK || scheme === ColorScheme.HIGH_CONTRAST_DARK;\n}\n","import { Emitter } from '../../../base/common/event.js';\nimport { Disposable, toDisposable } from '../../../base/common/lifecycle.js';\nimport { createDecorator } from '../../instantiation/common/instantiation.js';\nimport * as platform from '../../registry/common/platform.js';\nimport { ColorScheme } from './theme.js';\nexport const IThemeService = createDecorator('themeService');\nexport function themeColorFromId(id) {\n    return { id };\n}\nexport function getThemeTypeSelector(type) {\n    switch (type) {\n        case ColorScheme.DARK: return 'vs-dark';\n        case ColorScheme.HIGH_CONTRAST_DARK: return 'hc-black';\n        case ColorScheme.HIGH_CONTRAST_LIGHT: return 'hc-light';\n        default: return 'vs';\n    }\n}\n// static theming participant\nexport const Extensions = {\n    ThemingContribution: 'base.contributions.theming'\n};\nclass ThemingRegistry {\n    constructor() {\n        this.themingParticipants = [];\n        this.themingParticipants = [];\n        this.onThemingParticipantAddedEmitter = new Emitter();\n    }\n    onColorThemeChange(participant) {\n        this.themingParticipants.push(participant);\n        this.onThemingParticipantAddedEmitter.fire(participant);\n        return toDisposable(() => {\n            const idx = this.themingParticipants.indexOf(participant);\n            this.themingParticipants.splice(idx, 1);\n        });\n    }\n    getThemingParticipants() {\n        return this.themingParticipants;\n    }\n}\nconst themingRegistry = new ThemingRegistry();\nplatform.Registry.add(Extensions.ThemingContribution, themingRegistry);\nexport function registerThemingParticipant(participant) {\n    return themingRegistry.onColorThemeChange(participant);\n}\n/**\n * Utility base class for all themable components.\n */\nexport class Themable extends Disposable {\n    constructor(themeService) {\n        super();\n        this.themeService = themeService;\n        this.theme = themeService.getColorTheme();\n        // Hook up to theme changes\n        this._register(this.themeService.onDidColorThemeChange(theme => this.onThemeChange(theme)));\n    }\n    onThemeChange(theme) {\n        this.theme = theme;\n        this.updateStyles();\n    }\n    updateStyles() {\n        // Subclasses to override\n    }\n}\n"],"names":["countEOL","text","eolCount","firstLineLength","lastLineStart","eol","i","len","chr","TokenMetadata","metadata","className","fontStyle","colorMap","foreground","result","textDecoration","Boolean","ILanguageService","SparseMultilineTokens","startLineNumber","tokens","SparseMultilineTokensStorage","lineNumber","deltaRange","range","startLineIndex","endLineIndex","a","b","bDeltaLine","lastLineLength","firstCharCode","firstLineIndex","lastLineIndex","deletedLinesCount","tokenMaxDeltaLine","deletedBefore","position","lineIndex","pieces","tokenCount","startChar","maxDeltaLine","endChar","tokenIndex","deltaLine","low","high","mid","Math","midDeltaLine","min","max","SparseLineTokens","startDeltaLine","endDeltaLine","newTokenCount","hasDeletedTokens","firstDeltaLine","srcOffset","tokenDeltaLine","tokenStartCharacter","tokenEndCharacter","tokenMetadata","destOffset","aTokens","bTokens","destTokens","destFirstDeltaLine","Uint32Array","horizontalShiftForFirstLineTokens","startCharacter","endCharacter","deletedLineCount","Error","character","isInsertingPreciselyOneWordCharacter","offset","tokenLength","__param","paramIndex","decorator","target","key","SemanticTokensProviderStyling","_legend","_themeService","_languageService","_logService","HashTable","tokenTypeIndex","tokenModifierSet","languageId","encodedLanguageId","entry","tokenType","tokenModifiers","modifierSet","modifierIndex","tokenStyle","italicBit","boldBit","underlineBit","strikethroughBit","foregroundBits","startColumn","previousResultId","resultId","editIndex","editStart","maxExpectedStart","toMultilineTokens2","styling","srcData","tokensPerArea","lastLineNumber","lastStartCharacter","tokenStartIndex","tokenEndIndex","smallTokenEndIndex","bigTokenEndIndex","destData","areaLine","prevLineNumber","prevEndCharacter","deltaCharacter","__decorate","decorators","desc","d","c","arguments","r","Object","Reflect","HashTableEntry","entries","length","n1","n2","hash","p","oldElements","first","oldNext","element","Registry","Map","id","data","ColorScheme","isHighContrast","scheme","isDark","IThemeService","themeColorFromId","getThemeTypeSelector","type","Extensions","themingRegistry","participant","idx","registerThemingParticipant","Themable","themeService","theme"],"mappings":"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"}